name: Advanced Deployment Management

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  FORCE_COLOR: 1

jobs:
  pre-deployment-checks:
    name: Pre-Deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      deploy-ready: ${{ steps.validation.outputs.ready }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run quality checks
        id: quality
        run: |
          if npm run check; then
            echo "quality=passed" >> $GITHUB_OUTPUT
          else
            echo "quality=failed" >> $GITHUB_OUTPUT
            echo "::warning::Quality checks failed but deployment can continue"
          fi
          
      - name: Build and validate
        run: |
          npm run build
          
          # Validate critical files exist
          test -f src/ui.html || (echo "::error::Plugin UI not built" && exit 1)
          test -f docs/design-system-guide.html || (echo "::error::Documentation not built" && exit 1)
          
          # Check for basic functionality
          grep -q "figma" src/ui.html || (echo "::error::Plugin missing Figma integration" && exit 1)
          
      - name: Extract version info
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Deploying version: $VERSION"
          
      - name: Final validation
        id: validation
        run: |
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "::notice::Pre-deployment validation passed"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: inputs.environment == 'staging' && !inputs.rollback
    environment: staging
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for staging
        run: npm run build
        
      - name: Deploy to Netlify (staging)
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './docs'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Staging deployment v${{ needs.pre-deployment-checks.outputs.version }}"
          alias: staging-token-exporter
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}
          
      - name: Staging deployment success
        run: |
          echo "::notice::Staging deployment successful!"
          echo "🔗 Staging URL: https://staging-token-exporter.netlify.app"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: inputs.environment == 'production' && !inputs.rollback
    environment: production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for production
        run: npm run build
        
      - name: Create deployment backup
        run: |
          echo "Creating deployment backup..."
          mkdir -p .backup
          cp -r docs/ .backup/docs-$(date +%Y%m%d-%H%M%S)
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          cname: token-exporter.design
          commit_message: "Deploy v${{ needs.pre-deployment-checks.outputs.version }}"
          
      - name: Verify deployment
        run: |
          echo "Waiting for deployment to propagate..."
          sleep 30
          
          # Check if site is accessible (basic check)
          curl -sSf https://token-exporter.design > /dev/null || echo "::warning::Site may not be immediately accessible"
          
      - name: Production deployment success
        run: |
          echo "::notice::Production deployment successful!"
          echo "🚀 Live URL: https://token-exporter.design"
          echo "📦 Version: ${{ needs.pre-deployment-checks.outputs.version }}"

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: inputs.rollback
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout previous commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 10
          
      - name: Find previous deployment
        id: previous
        run: |
          # Find the last successful deployment commit
          PREV_COMMIT=$(git log --oneline --grep="Deploy v" -n 2 | tail -n 1 | cut -d' ' -f1)
          echo "previous_commit=$PREV_COMMIT" >> $GITHUB_OUTPUT
          echo "Rolling back to commit: $PREV_COMMIT"
          
      - name: Checkout previous version
        run: git checkout ${{ steps.previous.outputs.previous_commit }}
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build previous version
        run: npm run build
        
      - name: Deploy rollback (production)
        if: inputs.environment == 'production'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          cname: token-exporter.design
          commit_message: "Rollback deployment to ${{ steps.previous.outputs.previous_commit }}"
          
      - name: Deploy rollback (staging)
        if: inputs.environment == 'staging'
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './docs'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Rollback to ${{ steps.previous.outputs.previous_commit }}"
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}
          
      - name: Rollback success notification
        run: |
          echo "::notice::Rollback completed successfully!"
          echo "🔄 Environment: ${{ inputs.environment }}"
          echo "📍 Rolled back to: ${{ steps.previous.outputs.previous_commit }}"

  post-deployment-tests:
    name: Post-Deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Wait for deployment propagation
        run: sleep 60
        
      - name: Test staging environment
        if: needs.deploy-staging.result == 'success'
        run: |
          echo "Testing staging deployment..."
          curl -sSf https://staging-token-exporter.netlify.app > /dev/null
          echo "✅ Staging environment is accessible"
          
      - name: Test production environment
        if: needs.deploy-production.result == 'success'
        run: |
          echo "Testing production deployment..."
          curl -sSf https://token-exporter.design > /dev/null
          echo "✅ Production environment is accessible"
          
      - name: Health check summary
        run: |
          echo "::notice::Post-deployment verification completed"
          echo "All deployed environments are responding correctly"