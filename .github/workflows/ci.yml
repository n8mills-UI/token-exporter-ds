name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'cleanup/*', 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  CACHE_VERSION: v2
  FORCE_COLOR: 1

jobs:
  quality-checks:
    name: Quality & Compatibility
    runs-on: ubuntu-latest
    timeout-minutes: 15
    continue-on-error: false
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Cache build dependencies
        uses: actions/cache@v4
        with:
          path: |
            vendor/
            node_modules/.cache/
          key: ${{ runner.os }}-build-${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_VERSION }}-
            
      # Critical checks moved to build-and-test job since they need built files
        
      - name: Run Figma compatibility checks
        run: npm run check
        continue-on-error: true
        
      - name: Validate icon system
        run: node scripts/validate-icons-temp.js
        
      - name: Run comprehensive checks
        run: npm run check:all
        continue-on-error: true
        
      - name: Format check
        run: npm run format -- --check
        continue-on-error: true

  build-and-test:
    name: Build & Validate
    runs-on: ubuntu-latest
    needs: quality-checks
    timeout-minutes: 15
    
    strategy:
      fail-fast: false
      matrix:
        node-version: ['18', '20', '22']
        target: [plugin, documentation]
        exclude:
          # Only test docs on latest Node for speed
          - node-version: '18'
            target: documentation
          - node-version: '22'
            target: documentation
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Validate build outputs
        run: |
          test -f src/ui.html || exit 1
          test -f docs/design-system-guide.html || exit 1
          
      - name: Check build size
        run: |
          if [ "$(uname)" = "Darwin" ]; then
            UI_SIZE=$(stat -f%z src/ui.html)
          else
            UI_SIZE=$(stat -c%s src/ui.html)
          fi
          echo "Plugin UI size: ${UI_SIZE} bytes"
          if [ $UI_SIZE -gt 2097152 ]; then
            echo "::warning::Plugin UI size exceeds 2MB (${UI_SIZE} bytes)"
          fi
          
      - name: Run critical checks (requires built files)
        if: matrix.target == 'documentation'
        run: npm run check:critical
        
      - name: Validate build content
        run: |
          # Check for CSS inlining success
          if ! grep -q "<style>" src/ui.html; then
            echo "::error::CSS not properly inlined in plugin UI"
            exit 1
          fi
          
          # Check for JavaScript inlining
          if grep -q "<script src=" src/ui.html; then
            echo "::error::External script references found - CSP violation"
            exit 1
          fi
          
      - name: Run accessibility tests
        if: matrix.target == 'documentation'
        run: npm run lint:a11y
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.target }}-node${{ matrix.node-version }}-${{ github.sha }}
          path: |
            src/ui.html
            docs/design-system-guide.html
            docs/design-system.css
          retention-days: 30
          
      - name: Test plugin in browser (headless)
        if: matrix.target == 'plugin'
        run: |
          echo "Testing plugin build for basic functionality..."
          # Basic size and content validation
          test -s src/ui.html
          grep -q "figma" src/ui.html
          echo "Plugin build validation passed"

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for preview
        run: npm run build
        
      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v3.0
        with:
          publish-dir: './docs'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: true
          enable-commit-comment: false
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Run security audit
        run: npm audit --audit-level moderate
        continue-on-error: true
        
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: [quality-checks, build-and-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for production
        run: npm run build
        
      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          cname: token-exporter.design
          
      - name: Notify deployment success
        if: success()
        run: |
          echo "ðŸš€ Production deployment successful!"
          echo "ðŸ“– Documentation: https://token-exporter.design"
          
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "::error::Production deployment failed"
          echo "Check logs above for details"
          
      - name: Create release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false