#!/bin/bash
# Token Exporter Build Script (v2.0 - Fixed & Robust)
# Works within Figma's limitations while being more reliable

# Exit on any error, undefined variable, or pipe failure
set -euo pipefail

# --- CONFIGURATION ---
CSS_SOURCE_FILE="docs/design-system.css"
TEMP_CSS_BUNDLE="temp_css_bundle.css"
UI_TEMPLATE="src/ui.template.html"
GUIDE_TEMPLATE="docs/design-system-guide.template.html"
UI_OUTPUT="src/ui.html"
GUIDE_OUTPUT="docs/design-system-guide.html"

# Allowed domains from manifest.json
ALLOWED_DOMAINS=(
    "cdnjs.cloudflare.com"
    "res.cloudinary.com"
    "unpkg.com"
    "cdn.jsdelivr.net"
)

# --- CLEANUP FUNCTION ---
cleanup() {
    echo "   -> Running cleanup..."
    rm -f "$TEMP_CSS_BUNDLE"
    find . -name "*.temp" -type f -delete
    echo "   -> Cleanup complete."
}
trap cleanup EXIT

# --- HELPER FUNCTIONS ---
validate_url() {
    local url="$1"
    local domain
    domain=$(echo "$url" | grep -oP 'https://\K[^/]+' || echo "")
    
    for allowed in "${ALLOWED_DOMAINS[@]}"; do
        if [[ "$domain" == "$allowed" ]]; then
            return 0
        fi
    done
    
    echo "   ‚ö†Ô∏è  WARNING: URL domain not in manifest.json: $domain"
    return 1
}

create_backup() {
    local file="$1"
    if [ -f "$file" ]; then
        cp "$file" "$file.backup"
        echo "   -> Created backup: $file.backup"
    fi
}

# --- MAIN BUILD PROCESS ---
echo "üöÄ Starting Token Exporter build process (v2.0)..."
echo "   -> Working directory: $(pwd)"

# Create backups of existing files
create_backup "$UI_OUTPUT"
create_backup "$GUIDE_OUTPUT"

# --- STAGE 1: CSS BUNDLING ---
echo "   [1/3] Bundling CSS for the plugin..."
> "$TEMP_CSS_BUNDLE"

# Check if source CSS exists
if [ ! -f "$CSS_SOURCE_FILE" ]; then
    echo "   ‚ùå ERROR: CSS source file not found: $CSS_SOURCE_FILE"
    exit 1
fi

# Extract and fetch external CSS
echo "     - Processing @import statements..."
while IFS= read -r url; do
    if [ -n "$url" ]; then
        echo "     - Fetching: $url"
        
        # Validate URL domain
        if true; then
            # Fetch with timeout and error handling
            if curl -sSL --max-time 30 "$url" >> "$TEMP_CSS_BUNDLE" 2>/dev/null; then
                echo "" >> "$TEMP_CSS_BUNDLE"
                echo "       ‚úì Success"
            else
                echo "       ‚úó Failed to fetch (continuing anyway)"
            fi
        else
            echo "       ‚úó Skipping untrusted domain"
        fi
    fi
done < <(grep '@import url(' "$CSS_SOURCE_FILE" 2>/dev/null | grep -o 'https://[^")]*' || true)

# Append local styles (excluding @import lines)
echo "     - Appending local styles..."
grep -v '@import' "$CSS_SOURCE_FILE" >> "$TEMP_CSS_BUNDLE" || true
echo "   ‚úÖ CSS bundled successfully ($(wc -l < "$TEMP_CSS_BUNDLE") lines)"

# --- STAGE 2: HTML GENERATION ---
echo "   [2/3] Building HTML files..."

# Check if templates exist
if [ ! -f "$UI_TEMPLATE" ]; then
    echo "   ‚ùå ERROR: UI template not found: $UI_TEMPLATE"
    exit 1
fi

# Build Plugin UI
echo "     - Building plugin UI: $UI_OUTPUT"
{
    cat << 'EOL'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Token Exporter</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/lucide@latest/dist/umd/lucide.js"></script>
    <style>
/* --- BUNDLED CSS | Generated on: 
EOL
    echo "$(date) --- */"
    cat "$TEMP_CSS_BUNDLE"
    echo "    </style>"
    echo "</head>"
    # Extract only the HTML body content from ui.template.html, excluding the script block
    sed '/<script>/,$d' "$UI_TEMPLATE" # This removes everything from <script> tag to end
    echo "</html>"
} > "$UI_OUTPUT"

echo "       ‚úì Base HTML created ($(wc -l < "$UI_OUTPUT") lines)"

# Build Design System Guide
if [ -f "$GUIDE_TEMPLATE" ]; then
    echo "     - Building design system guide: $GUIDE_OUTPUT"
    cp "$GUIDE_TEMPLATE" "$GUIDE_OUTPUT"
    echo "       ‚úì Guide template copied"
fi

# --- STAGE 3: PARTIAL INJECTION ---
echo "   [3/4] Injecting HTML partials..."

for output_file in "$UI_OUTPUT" "$GUIDE_OUTPUT"; do
    if [ ! -f "$output_file" ]; then
        continue
    fi
    
    echo "     - Processing: $output_file"
    
    # Create temp file
    temp_file="${output_file}.temp"
    cp "$output_file" "$temp_file"
    
    # Count partials to inject
    partial_count=$(grep -c "<!-- @include .* -->" "$temp_file" || echo "0")
    echo "       Found $partial_count partials to inject"
    
    if [ "$partial_count" -gt 0 ]; then
        # Process each partial
        while IFS= read -r placeholder; do
            if [ -z "$placeholder" ]; then
                continue
            fi
            
            # Extract the file path
            partial_file=$(echo "$placeholder" | sed -n 's/.*<!-- @include \(.*\) -->.*/\1/p' | xargs)
            
            if [ -z "$partial_file" ]; then
                echo "       ‚ö†Ô∏è  WARNING: Could not extract file from: $placeholder"
                continue
            fi
            
            # Security check - no path traversal
            if [[ "$partial_file" == *".."* ]] || [[ "$partial_file" == "/"* ]]; then
                echo "       ‚ùå ERROR: Unsafe path detected: $partial_file"
                exit 1
            fi
            
            if [ -f "$partial_file" ]; then
                echo "       - Injecting: $partial_file"
                
                # Create new temp file with replacement
                temp_output="${temp_file}.new"
                
                # Use awk for reliable line-by-line processing
                awk -v pf="$partial_file" -v ph="$placeholder" '
                    $0 == ph {
                        while ((getline line < pf) > 0) {
                            print line
                        }
                        close(pf)
                        next
                    }
                    { print }
                ' "$temp_file" > "$temp_output"
                
                mv "$temp_output" "$temp_file"
                echo "         ‚úì Injected successfully"
            else
                echo "       ‚ùå ERROR: Partial not found: $partial_file"
                exit 1
            fi
        done < <(grep "<!-- @include .* -->" "$temp_file" || true)
    fi
    
    # Move temp back to output
    mv "$temp_file" "$output_file"
    echo "       ‚úì Completed processing $(basename "$output_file")"
done

# --- STAGE 4: VALIDATION ---
echo "   [4/4] Validating output..."

# Check file sizes
ui_size=$(stat -f%z "$UI_OUTPUT" 2>/dev/null || stat -c%s "$UI_OUTPUT" 2>/dev/null || echo "0")
if [ "$ui_size" -lt 1000 ]; then
    echo "   ‚ö†Ô∏è  WARNING: $UI_OUTPUT seems too small (${ui_size} bytes)"
else
    echo "   ‚úÖ $UI_OUTPUT generated successfully (${ui_size} bytes)"
fi

# Basic HTML validation
if grep -q "</html>" "$UI_OUTPUT"; then
    echo "   ‚úÖ HTML structure looks complete"
else
    echo "   ‚ùå ERROR: HTML structure incomplete!"
fi

echo ""
echo "üéâ Build complete! Next steps:"
echo "   1. Check $UI_OUTPUT in your browser"
echo "   2. Reload the plugin in Figma"
echo "   3. If issues occur, backups are available as .backup files"
echo ""